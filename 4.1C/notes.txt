[ApiController]
[Route("api/maps")]
public class MapsController : ControllerBase
{
    private static readonly List<Map> _maps = new List<Map>
    {
        // maps here
    };

    [HttpGet("{id}/{x}-{y}")] //Endpoint 7
    public IActionResult CheckCoordinate(int id, int x, int y)
    {
        // Check if coordinate provided is in the wrong format
        if (x < 0 || y < 0)
        {
            return BadRequest("Coordinates must be non-negative values.");
        }

        // Find the map by id
        var map = _maps.FirstOrDefault(m => m.Id == id);

        // If map with specified id does not exist, return NotFound
        if (map == null)
        {
            return NotFound();
        }

        // Check whether the coordinate is on the map
        bool isOnMap = x < map.Columns && y < map.Rows;

        // Return Ok with the result of whether the coordinate is on the map
        return Ok(isOnMap);
    }

    [HttpGet] //Endpoint 4
    public IEnumerable<Map> GetAllMaps()
    {
        return _maps;
    }

    [HttpGet("{id}")] //Endpoint 9
    public IActionResult GetMapById(int id)
    {
        var map = _maps.FirstOrDefault(m => m.Id == id);
        if (map == null)
        {
            return NotFound();
        }
        return Ok(map);
    }

    [HttpPost] //Endpoint 10
    public IActionResult AddMap(Map newMap)
    {
        if (newMap == null)
        {
            return BadRequest();
        }

        int newId = _maps.Count + 1;

        newMap.CreatedDate = DateTime.Now;
        newMap.ModifiedDate = DateTime.Now;
        newMap.Id = newId;

        _maps.Add(newMap);

        return CreatedAtRoute("GetMapById", new { id = newMap.Id }, newMap);
    }

    [HttpPut("{id}")] //Endpoint 11
    public IActionResult UpdateMap(int id, Map updatedMap)
    {
        var existingMap = _maps.FirstOrDefault(m => m.Id == id);

        if (existingMap == null)
        {
            return NotFound();
        }

        try
        {
            if (!string.IsNullOrEmpty(updatedMap.Name))
            {
                existingMap.Name = updatedMap.Name;
            }
            if (updatedMap.Description != null)
            {
                existingMap.Description = updatedMap.Description;
            }
            existingMap.Columns = updatedMap.Columns;
            existingMap.Rows = updatedMap.Rows;

            existingMap.ModifiedDate = DateTime.Now;

            return NoContent();
        }
        catch
        {
            return BadRequest();
        }
    }

    [HttpDelete("{id}")] //Endpoint 12
    public IActionResult DeleteMap(int id)
    {
        var mapToRemove = _maps.FirstOrDefault(m => m.Id == id);

        if (mapToRemove == null)
        {
            return NotFound();
        }

        _maps.Remove(mapToRemove);

        return NoContent();
    }
}
